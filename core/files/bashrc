# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
    alias ec="emacsclient -a ''"
fi

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'
alias emacs='emacs -nw'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
fi

if [ -f ~/.bash_functions ]; then
	. ~/.bash_functions
fi

## START
bold='\[\e[1m\]'
plain='\[\e[0m\]'

set_begin()
{
  if [ -z "$begin" ]
  then
    begin="$(date +"%s %N")"
  fi
}

calc_elapsed()
{
  read begin_s begin_ns <<< "$begin"
  begin_ns="${begin_ns##+(0)}"
  # PENDING - date takes about 11ms, maybe could do better by digging in
  # /proc/$$.
  read end_s end_ns <<< $(date +"%s %N")
  end_ns="${end_ns##+(0)}"
  local s=$((end_s - begin_s))
  local ms
  if [ "$end_ns" -ge "$begin_ns" ]
  then
    ms=$(((end_ns - begin_ns) / 1000000))
  else
    s=$((s - 1))
    ms=$(((1000000000 + end_ns - begin_ns) / 1000000))
  fi
  elapsed="$(printf " %2u:%03u" $s $ms)"
  if [ "$s" -ge 300 ]
  then
    elapsed="$elapsed [$(human_time $s)]"
  fi
}

vpn_indicator() {
  if [ ! -z "$(ps aux | grep vpnc | grep -v grep)" ]; then
    echo "VPN"
  else
    echo "NO VPN"
  fi
}

human_time()
{
  local s=$1
  local days=$((s / (60*60*24)))
  s=$((s - days*60*60*24))
  local hours=$((s / (60*60)))
  s=$((s - hours*60*60))
  local min=$((s / 60))
  if [ "$days" != 0 ]
  then
    local day_string="${days}d "
  fi
  printf "$day_string%02d:%02d\n" $hours $min
}

timer_prompt()
{
  status=$?
  local size=16
  calc_elapsed
  if [ "${#PWD}" -gt $size ]
  then
    pwd_string="${PWD: -$size}"
  else
    pwd_string="$(printf "%${size}s" $PWD)"
  fi
  PS1="$bold$elapsed $(vpn_indicator) $pwd_string $status\\$ $plain"
  begin=
}

set_begin
trap set_begin DEBUG
PROMPT_COMMAND=timer_prompt

## END
